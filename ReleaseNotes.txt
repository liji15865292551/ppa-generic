
Release Notes for Primary Protected Application (PPA),
a resident EL3 firmware.

Services provided:
    EL3 initialization
        v8 cores
        GIC
        Interconnect
        SoC
    Secure Monitor gateway
    PSCI v0.2
    Aarch32 kernel support

Devices Supported:
    LS1012A
    LS1028A
    LS1043A, incl v1.1
    LS1046A
    LS1088A
    LS2080A/2085A
    LS2088A
    UA

Date: 11/16/2016 --------------------------------------------------------------

1) Added support for parallel builds, at all levels.
   The .NOTPARALLEL pseudo-target has been removed from the makefiles, and
   make -j24 is supported for builds at all levels. The "-j24" parameter has also
   been added to the make coomands in the top level "build" script.

2) For devices with CCI-400 intercnnects, clearing the "terminate barriers" bit
   in the Control Override register. This bit is set by bootloader as a WA for
   an issue with uninitialized ddr not responding to barrier requests, resulting
   in device hang. The bit needs to be cleared after ddr is up.

//- end 11/16/2016 update -----------------------------------------------------

Date: 10/25/2016 --------------------------------------------------------------

1) Added core timer enable in _soc_core_entr_off() for LS2088.

2) Removed 5th parameter (endianness) from smc function to shift execution
   at EL2 to Aarch32. Parameters are now:
       x0 = 0xC000_FF04 (smc function id)
       x1 = start address for EL2 @ Aarch32 (assumes kernel start)
       x2 = first parameter to pass to EL2 @ Aarch32
       x3 = second parameter to pass to EL2 @ Aarch32
     return values:
       x0 =  0, success
       x0 = -3, bad input parm
       x0 = -4, called from invalid execution level (not EL2)

   This function shifts execution from EL2 @ Aarch64 to EL2 @ Aarch32.

//- end 10/25/2016 update -----------------------------------------------------


Date: 10/24/2016 --------------------------------------------------------------

1) Added support for UA device.
   Initial PSCI support is smp-boot and system reset.


//- end 10/24/2016 update -----------------------------------------------------


Date: 10/11/2016 --------------------------------------------------------------

1) New function for Aarch32 support
   Shift from EL2 @ Aarch64 to EL2 @ Aarch32 via smc64 function.
     input parameters:
       x0 = 0xC000_FF04 (smc function id)
       x1 = start address for EL2 @ Aarch32 (assumes kernel start)
       x2 = first parameter to pass to EL2 @ Aarch32
       x3 = second parameter to pass to EL2 @ Aarch32
       x4 = 0, EL2 @ Aarch32 in LE (little-endian)
       x4 = 1, EL2 @ Aarch32 in BE (big-endian)
     return values:
       x0 = 0, success
       x0 = -3, bad input parm
       x0 = -4, called from invalid execution level (not EL2)

   This function shifts execution from EL2 @ Aarch64 to EL2 @ Aarch32.

//- end 10/11/2016 update -----------------------------------------------------


Date: 09/26/2016 --------------------------------------------------------------

New Multi-Level build system

1) Build any target/device from the top-level folder (ppa). The 
   build/src and build/obj folders generated by the build are created at
   the SoC folder level.

      > cd ppa
      > build <target> [options...] <device list>

    Examples:
      >build rdb ls1043          - builds binary image for the LS1043
      >build rdb ls1043 ls1046   - builds binary image for the LS1043 & LS1046
      >build rdb-fit all         - builds fit image for all devices
      >build clean ls1043        - clean the build for the LS1043 device
      >build rdb DBG=on ls2088   - builds a debug image for the LS2088

    Note: building the fit image requires the mkimage tool, not provided.

2) Build any target/device from the SoC folder level.

      >cd soc-ls1012
      >make rdb               - build the binary image for the LS1012
      >make clean             - clean the build for the LS1012

      >cd soc-ls1046
      >make rdb DBG=on        - build the debug image for the LS1046

3) Build any target from the platform-rdb folder.

      >cd soc-ls1012/platform-rdb
      >make rdb

    Note that the build/src and build/obj folders are generated at the
    platform-rdb level.


Current PSCI implementation per device:
    x = supported
    - = not currently supported

                     | LS1012 | LS1043 | LS1046 |
-------------------------------------------------------------------------------
cpu_on (smp_boot)    |   x    |   x    |   x    |
-------------------------------------------------------------------------------
cpu_on (hotplug)     |  n/a   |   x    |   x    |
-------------------------------------------------------------------------------
cpu_off (hotplug)    |  n/a   |   x    |   x    |
-------------------------------------------------------------------------------
affinity_info        |   x    |   x    |   x    |
-------------------------------------------------------------------------------
system_reset         |   x    |   x    |   x    |
-------------------------------------------------------------------------------
cpu_suspend (core)   |   x    |   x    |   x    |
-------------------------------------------------------------------------------
cpu_suspend (clstr)  |   -    |   x    |   -    |
-------------------------------------------------------------------------------
cpu_suspend (system) |   x    |   x    |   x    |
-------------------------------------------------------------------------------

                     | LS1028 | LS1088 | LS2080 | LS2088 |
-------------------------------------------------------------------------------
cpu_on (smp_boot)    |   x    |   x    |   x    |   x    |
-------------------------------------------------------------------------------
cpu_on (hotplug)     |   -    |   -    |   -    |   -    |
-------------------------------------------------------------------------------
cpu_off (hotplug)    |   -    |   -    |   -    |   -    |
-------------------------------------------------------------------------------
affinity_info        |   x    |   x    |   x    |   x    |
-------------------------------------------------------------------------------
system_reset         |   x    |   x    |   x    |   x    |
-------------------------------------------------------------------------------
cpu_suspend (core)   |   -    |   -    |   -    |   -    |
-------------------------------------------------------------------------------
cpu_suspend (clstr)  |   -    |   -    |   -    |   -    |
-------------------------------------------------------------------------------
cpu_suspend (system) |   -    |   -    |   -    |   -    |
-------------------------------------------------------------------------------

//- end 09/26/2016 update -----------------------------------------------------



